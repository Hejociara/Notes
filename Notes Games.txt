### Variáveis e as instruções

Processing: setup e draw

A função setup é responsável por executar as configurações da tela do programa criado, como tamanho, cor, número de quadros por segundo etc.

A função draw é uma função que se repetirá constantemente enquanto o programa estiver aberto; nela, vão todas as instruções de movimentação do personagem e qualquer outra ação que precisar se repetir durante o jogo. 

O comando void significa que a função criada não retornará um valor. Os parênteses fazem parte da sintaxe das funções e as chaves limitam o que está sendo programado dentro e fora delas.

Na função draw ficará o loop do programa,  esta função desenha os elementos da tela.

Bits são a menor unidade de memória para um computador

A combinação de oito unidades de bit forma um **byte**, a segunda menor unidade de memória.

Cada bit presente em um byte representa uma potência de dois.

As cores também podem ser representadas por outro tipo de valor, chamado **hexadecimal**.

**Os hexadecimais funcionam em base 16, assim os valores variam de 0 a F.** 

 ***Case Sensitive***

Os componentes de cores podem ter um espaço reservado para a escala de transparência, conhecida como escala Alpha. Ela pode aparecer como uma variável char extra que também recebe valores de 0 a 255.

***case sensitive\*** Diferenciação da interpretação de letras minúsculas e maiúsculas 

Camel case - prática de inicializar as letras de cada palavra com letras em maiúsculo



**CONCATENAÇÂO** -  Para juntar o texto a ser exibido com o valor do resultado da expressão que estava dentro da variável é utilizado o símbolo de soma.

EX: *println(“O resultado da expressão é: ” + result);*

O operador E (&&) compara duas ou mais expressões; se todas tiverem resultado true, ele retorna o valor true. Porém, se uma das duas expressões ou todas tiverem valor false, o valor retornado será false, enquanto o operador OU (||) retorna o valor true, contanto que ao menos uma das expressões tenha resultado true e apenas retorna false se todos as expressões tiverem valor false.

Os comandos da biblioteca padrão do Processing para criação são:

## SIZE

Utilizado para estabelecer o tamanho da tela. Este comando pode receber até três argumentos, sendo os dois primeiros a largura e o tamanho da tela em pixels obrigatórios, o último é o tipo de renderização, a qual precisa ser alterada se houver a utilização de elementos tridimensionais.

EX:

*void setup() {*

*size(640,360);*

*}*

## background  

Determina a cor de fundo da tela. Pode receber até quatro valores, os quais representam as três cores do sistema RGB (vermelha, amarela e azul) e a opacidade. Caso receba apenas um argumento, será entendido como escalas de cinza.

*void setup() {*

*background(0, 255, 0); //Cor azul}*



width – Retorna o valor de largura da tela, definido no comando size.

*void setup() {*

*size(640, 360);*

*println(“A largura da tela é: ” + width); //O valor de width declarado é igual a 640}*



height – Retorna o valor da altura da tela, definido no comando size. 

*void setup() {*

*size(640, 360);*

*println(“A largura da tela é: ” + height); //O valor de height declarado é igual a 360}*



point – Cria um ponto na tela com o tamanho de um pixel. Recebe apenas os valores de posicionamento em x e y.

*void draw() {point(50, 50);}*



line – Cria uma linha de um ponto A a um ponto B. Pode utilizar o comando stroke na linha anterior para determinar a cor do traço e o comando strokeWeight para determinar a espessura do traço. Pode receber até seis valores, os quais equivalem à posição dos pontos inicial e final em x e y, sendo obrigatórios. Os dois últimos pontos são utilizados apenas no caso da renderização tridimensional e determinam o posicionamento no eixo z do último ponto.

*void draw() {line(50, 50, 100, 50);}*

quad – Cria uma forma quadrilateral que não possui necessariamente ângulos de noventa graus. Assim como uma linha, essa forma precisa do posicionamento x e y de cada um dos quatro pontos, os quais são conhecidos como vértices.

*void draw() {*

*quad(20, 50, 50, 50, 70, 80, 10, 80);}*



triangle – Cria uma forma com três vértices. Cada vértice precisa receber as duas coordenadas dos eixos x e y.

*void draw() {* 

*triangle(50, 50, 80, 80, 20, 80);}*



rect – Cria uma forma retangular com ângulos internos de noventa graus. Diferente das demais formas, o comando rect somente necessita das posições dos eixos x e y iniciais; os demais argumentos são a largura e altura do retângulo. Também é possível atribuir valores para o arredondamento dos vértices. Seu ponto cardeal inicial fica localizado no canto superior esquerdo da forma.

*void draw() {*

*rect(20, 20, 30, 50);}*



ellipse – Desenha uma elipse que pode ser oval. Este comando recebe valores para a posição inicial nos eixos x e y, além da altura e largura da forma. Diferentemente do comando rect, o ponto inicial fica no centro da forma.

*void draw() {*

*ellipse(50, 50, 20, 50);}*



ellipse – Desenha uma elipse que pode ser oval. Este comando recebe valores para a posição inicial nos eixos x e y, além da altura e largura da forma. Diferentemente do comando rect, o ponto inicial fica no centro da forma. `ellipse([coordenada x],[coordenada y], [largura], [altura])`.

*void draw() {*

*ellipse(50, 50, 20, 50);}*



Sprites podem ser dinâmicos ou estáticos.

O formato de compressão da imagem, o mais apropriado para jogos é o PNG

Sintaxe para a criação de um objeto de imagem:

*//Declaração do objeto com o tipo seguido pelo nome do objeto
PImage img;
void setup() {size(640,360);
//Atribuição da imagem ao objeto
img = loadImage("BG.png");}
void draw() {
//Exibição do objeto na tela com os parâmetros de posicionamento e tamanho
image(img, 0, 0, width, height);}*

### TILES  -  são usadas pequenas peças lado a lado para compor as plataformas, terrenos e demais cenários. 

Tiles podem ser dispostos em tilesets e podem ser acessados pelo seu posicionamento

noFIll (); //a forma não terá nem um preenchimento  

stroke(0, 0, 255) // contorno do objeto

noStroke() // sem contorno



Para assumir a posição em que o mouse se encontra, utiliza-se o comando a seguir:

```
void draw() {
  ellipse(mouseX, mouseY, 100, 100);
}
```

Para que a posição em que o mouse se encontra seja atribuída uma nova posição enquanto pressiona-se o mouse com o botão direito do mouse, utilize o seguinte recurso: 

```
if (mousePressed){
```

Exemple:

```
void setup() {
  size(510, 510);
  background(#333333);
  noFill();
  stroke(#FFFFFF);
}
void draw() {
  if (mousePressed){
    ellipse(mouseX, mouseY, 100, 100);
  }
}
```

O tamanho aleatório da forma geométrica pode ser definido por:

random()

Quando queremos fazer com que o objeto se mova, ou ande um pixel, devemos incrementar.

Exemple:

float posX;
void setup() {
  size(510, 510);
  background(#333333);
  noFill();
  stroke(#FFFFFF);
  posX= width/2;
}
void draw() {
  ellipse(posX, height/2, 30, 30);
  posX = posX +1;
}



No setup deve-se definir um valor inicial para a variável.

Para fazer a movimentação e não deixar rastro, deve-se redefinir a cor do `background()`, dentro do `draw()`. Assim, a cada quadro, o programa pinta o fundo por cima de tudo e desenha o círculo na sua nova posição.

```
float posX;
void setup() {
  size(510, 510);
  background(#333333);
  noFill();
  stroke(#FFFFFF);
  posX = width/2;
}
void draw() {
  background(#333333);
  ellipse(posX, height/2, 30, 30);
  posX = posX + 1;
}
```

**tilesets** - podem possuir várias peças diferentes, economizando espaço da memória e necessitando que apenas um arquivo seja carregado.

IF – A estrutura condicional padrão é o IF. Com ela, é possível criar caminhos de escolha dentro do programa de forma simples ou aninhada, com várias condicionais consecutivas. Por exemplo:

*If (3 < 5) {println(“O número três é menor do que o número cinco”);}*

Em jogos, IF é utilizada para as principais ações programadas. É através dela que é verificado se um botão está sendo apertado ou que a inteligência artificial do inimigo é criada, por exemplo. A estrutura ainda dispõe de mais duas variações utilizando as palavras-chave ELSE e ELSE IF.



A palavra-chave ELSE é utilizada quando se quer estabelecer um caminho opcional para quando a condição da estrutura IF não se cumprir. Por exemplo:

*int life = 30;*

*if (life < 15) {*

*println(“O personagem está com menos da metade da vida. Tome cuidado!”);}*

*else {println(“O personagem está com mais da metade da vida. Continue lutando!”);}*

 

Enquanto a palavra-chave ELSE IF é usada para criar mais uma condição alternativa. É possível criar quantas funções alternativas forem necessárias. Por exemplo:

*String type = “Fire”;*

*if (type == “Fire”) {println(“O seu personagem tem vantagem contra o tipo Planta.”);}*

*else if (type == “Water”) {println (“O seu personagem tem vantagem contra o tipo Fogo.”);}*

*else if (type == “Plant”) {println (“O seu personagem tem vantagem contra o tipo Água.”);}*

*else (){println(“O seu personagem não têm vantagem contra nenhum tipo.”)}*



WHILE – A estrutura de repetição WHILE é utilizada para repetir um bloco de comandos enquanto determinada condição não é cumprida. Por exemplo: 

*int i = 1;*

*while (i < 10) {println(“Número de vezes que o laço se repetiu: ” + i”);*

*i = i + 1;}*

 

É imprescindível que exista o acréscimo do índice para que o loop termine, caso contrário ele ocorrerá de forma infinita. O WHILE também pode ser utilizado para criar um laço de repetição infinito para que haja uma atualização constante. A função draw pode ser vista como um exemplo disto.

 

*while (true) {println(“Este laço é infinito.”);}*



FOR –  A estrutura FOR é usada, assim como a estrutura WHILE, para que um bloco de script seja repetido diversas vezes, com a diferença que é possível estabelecer internamente o valor inicial da variável que será utilizada como condição, o limite de repetição e a forma de acréscimo. Eis a sintaxe:

*for (int i = 0; i < 10; i = i + 1){println(“O valor da variável i é:” + i);}*



A operação de concatenação pode ser usada para somar posições e mover personagens na tela.

Array - podem armazenar diversos itens em uma mesma variável, para acessar um item de um array é necessário indicar o seu índice.



### Utilizando mouse e teclado

Para saber a posição horizontal do mouse basta utilizar o comando mouseX, e para obter a posição vertical basta utilizar o comando mouseY. Basicamente, para que um objeto seja desenhado na posição do mouse, é necessário que ele receba as posições x e y do mouse.

*void setup() {**
size(640,360);
background(0);
}*

*void draw() {
background(0);
//Esconde a imagem do cursor
noCursor();
//A elipse tem sua posição constantemente atualizada pela posição do mouse
ellipse(mouseX, mouseY, 20,20);
**}* 

Para utilizar os botões do mouse para executar alguma tarefa, é utilizada a função mousePressed().

### Utilizando o teclado 

Para captar os botões pressionados no teclado, usa-se: keyPressed .

 keyReleased - verifica se um botão terminou de ser pressionado.

**INTELIGÊNCIA ARTIFICIAL**

Em desenvolvimento de jogos digitais, a IA é o comportamento atribuído aos robôs virtuais, também conhecidos como bots.

As máquinas de estado são um conjunto de reações possíveis do bot para cada situação presente no jogo, por exemplo: descansar, atacar, desviar, perseguir, fugir, esconder-se, entre outras ações, junto às condições que estabelecem a transição entre os comportamentos, conhecidos como estados.

No Processing, a função para verificar a distância entre dois pontos é chamada dist, que recebe como parâmetro as posições x e y.

Para facilitar o processo de desenvolvimento de jogos, foram criados os motores de jogos, também conhecidos como Game Engines ou motores gráficos.

Os motores de jogos são programas de computador que contêm diversas bibliotecas e ferramentas para agilizar a programação e o desenvolvimento de jogos digitais em geral. Também é possível criar suas próprias *game engines*, criando programas que executem funções comuns na criação de jogos.

Algumas ferramentas que um motor gráfico pode conter são:

* A renderização de gráficos bidimensionais e tridimensionais através da comunicação com a placa de vídeo;

* Motores de física para especificação de atributos variáveis relacionados às leis físicas transpostas para o universo digital do jogo;

* Criação de animações, efeitos visuais, partículas e texturas; recursos para a criação de inteligências artificiais;

* Ferramentas para administrar pastas de arquivos;

* Criação e alteração de sons;

## Motores de jogos

São programas de computador que contêm diversas bibliotecas e ferramentas para agilizar a programação e o desenvolvimento de jogos digitais em geral

## **PRINCIPAIS MOTORES DE JOGOS**

**Unity**

Unity3D, é um motor gráfico criado pela empresa Unity Tecnologies, pensado primariamente para a criação de jogos 3D, porém, com o passar dos anos, adquiriu suporte para a criação de jogos 2D.

Utiliza MonoDevelop, mas também pode ser substituído por outros programas e utiliza atualmente a linguagem C# para o desenvolvimento de jogos.

Um dos grandes diferenciais do Unity é a grande variedade e facilidade para exportar o jogo para diversas plataformas, dentre elas dispositivos móveis, web, consoles e computadores

## **Unreal**

Criada pela empresa Epic Games, a Unreal foi criada para jogos de tiro em primeira pessoa. Apesar disso, esse motor é amplamente usado para o desenvolvimento de diversos tipos de jogos.

Utiliza-se a linguagem C++ e Blueprint -implementada a partir da Unreal Engine 4-.

### **Construct**

Desenvolvido pela empresa Scirra, é um programa de desenvolvimento de jogos focado em jogos 2D, baseado na tecnologia HTML5. A versão Construct 3 pode ser usada diretamente de um navegador web.

Esse motor de jogos não possui uma linguagem textual para programação, ao invés disso ele conta com uma linguagem visual composta de eventos e um sistema de lógica baseado em comportamentos. 

O programa conta com um editor de imagens, sendo possível criar ou editar sprites e animações internamente no software, também efeitos visuais, além de um sistema de clicar e arrastar para adicionar objetos à cena.

### **GameMaker Studio**

Projetado pela empresa Yo Yo Games, o GameMaker é um motor de jogos com linguagem de programação própria, a Game Maker Language, também conhecida como GML.

O motor tem algumas ferramentas para facilitar a importação de sprites e imagens bidimensionais, sendo bastante usado para a criação de jogos 2D. Ele também conta com ferramentas para criação interna de sprites, sons e scripts.

**CryEngine** 

Ele suporta as linguagens de programação C++ e Lua.
